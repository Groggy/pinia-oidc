import { User } from "oidc-client-ts";
import { AuthenticateOidcSilentPayload, PiniaOidcClientSettings, PiniaOidcStoreListeners, PiniaOidcStoreSettings } from "../../types/oidc";
import { PiniaState, PiniaStore } from "../../types/store";
declare const createStoreModule: (oidcSettings: PiniaOidcClientSettings, storeSettings?: PiniaOidcStoreSettings, oidcEventListeners?: PiniaOidcStoreListeners) => PiniaStore<PiniaState, {
    oidcIsAuthenticated(): boolean;
    oidcUser(): any;
    oidcAccessToken(): any;
    oidcAccessTokenExp(): number | null;
    oidcScopes(): any;
    oidcIdToken(): any;
    oidcIdTokenExp(): number | null;
    oidcRefreshToken(): any;
    oidcRefreshTokenExp(): number | null;
    oidcAuthenticationIsChecked(): any;
    oidcError(): any;
    oidcIsRoutePublic(): (route: any) => boolean;
}, {
    oidcCheckAccess(route: any): Promise<unknown>;
    authenticateOidc(payload?: AuthenticateOidcSilentPayload | string): Promise<void>;
    oidcSignInCallback(url: string): Promise<unknown>;
    authenticateOidcSilent(payload?: AuthenticateOidcSilentPayload): Promise<unknown>;
    authenticateOidcPopup(payload?: AuthenticateOidcSilentPayload): Promise<void>;
    oidcSignInPopupCallback(url: string): Promise<unknown>;
    oidcWasAuthenticated(user: User): void;
    storeOidcUser(user: User): Promise<void>;
    getOidcUser(): Promise<User | null>;
    addOidcEventListener(payload: {
        eventName: string;
        eventListener: PiniaOidcStoreListeners;
    }): void;
    removeOidcEventListener(payload: {
        eventName: string;
        eventListener: PiniaOidcStoreListeners;
    }): void;
    signOutOidc(payload: any): Promise<void>;
    signOutOidcCallback(): Promise<import("oidc-client-ts").SignoutResponse>;
    signOutPopupOidc(payload: any): Promise<void>;
    signOutPopupOidcCallback(): Promise<void>;
    signOutOidcSilent(payload: any): Promise<unknown>;
    removeUser(): any;
    removeOidcUser(): Promise<void>;
    clearStaleState(): Promise<void>;
    setOidcAuth(user: User): void;
    setOidcUser(user: User): void;
    unsetOidcAuth(): void;
    setOidcAuthIsChecked(): void;
    setOidcEventsAreBound(): void;
    setOidcError(payload: any): void;
}>;
export default createStoreModule;
